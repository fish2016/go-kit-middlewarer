// Autogenerated code, do not change directly.
// To make changes to this file, please modify the templates at
// go-kit-middlewarer/tmpl/*.tmpl

// Package logging defines a function for creating a go-kit logging {{.InterfaceName}}Middleware
package logging

import (
	"time"

	"github.com/go-kit/kit/log"

	{{range .ImportsWithoutTime}}{{template "identity" .}}
	{{end}}

	"{{.EndpointPackage}}"
	{{.BasePackageImport}}
)

type logging{{.InterfaceName}} struct {
	logger log.Logger
	{{.BasePackageName}}.{{.InterfaceName}}
	root {{.BasePackageName}}.{{.InterfaceName}}
}

// Middleware represents a middleware used to wrap a {{.BasePackage}}.{{.InterfaceName}} and provides logging functionality.
func Middleware(logger log.Logger, root {{.BasePackageName}}.{{.InterfaceName}}) {{.EndpointPackageName}}.{{.InterfaceName}}Middleware {
	return func( next {{.BasePackageName}}.{{.InterfaceName}} ) {{.BasePackageName}}.{{.InterfaceName}} {
		return logging{{.InterfaceName}} {
			logger: logger,
			{{.InterfaceName}}: next,
			root: root,
		}
	}
}

{{range .Methods}}
{{template "method" .}}
{{end}}
{{define "identity"}}{{.}}{{end}}
{{define "method"}}// {{.MethodName}} implements {{.BasePackage}}.{{.InterfaceName}}
func ({{.LocalName}} logging{{.InterfaceName}}) {{.MethodName}}({{.MethodArguments}}) ({{.MethodResults}}) {
	defer func(begin time.Time){
		_ = {{.LocalName}}.logger.Log(
			"method", {{.EndpointPackageName}}.Path{{.MethodName}},
			{{template "extra" .}}
			{{range .MethodResultNames}}{{template "logit" .}}{{end}}
			{{range .MethodArgumentNames}}{{template "logit" .}}{{end}}
			"took", time.Since(begin),
		)
	}(time.Now())


	{{if .MethodResults}}
	{{.MethodResultNamesStr}} = {{.LocalName}}.{{.InterfaceName}}.{{.MethodName}}({{.MethodArgumentNamesStr}}){{else}}
	{{.LocalName}}.{{.InterfaceName}}.{{.MethodName}}({{.MethodArgumentNamesStr}}){{end}}
	return
}{{end}}
{{define "logit"}}"{{.}}", {{.}},
{{end}}
