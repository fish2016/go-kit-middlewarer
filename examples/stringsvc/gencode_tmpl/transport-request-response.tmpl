// Autogenerated code, do not change directly.
// To make changes to this file, please modify the templates at
// go-kit-middlewarer/tmpl/*.tmpl


package http

import (
	"context"
	"net/http"

	"github.com/fish2016/go-kit-middlewarer/encoding"

	{{range .Imports}}{{.}}
	{{end}}

	{{.BasePackageImport}}
)

var _ {{.BasePackageName}}.{{.InterfaceName}}

type embedMime struct {
	mime string
}

func (em *embedMime) GetMime() string {
	if em == nil || em.mime == "" {
		return "application/json"
	}

	return em.mime
}

func (em *embedMime) SetMime( mime string ) {
	em.mime = mime
}

{{define "request-response"}}
// {{.MethodNameLcase}}Request defines a Request structure for the Method {{.BasePackage}}.{{.InterfaceName}}.{{.MethodName}}
type {{.MethodNameLcase}}Request struct {
	*embedMime
	{{range .Params}}{{template "param" .}}
	{{end}}
}

// {{.MethodNameLcase}}Response defines a Response structure for the Method {{.BasePackage}}.{{.InterfaceName}}.{{.MethodName}}
type {{.MethodNameLcase}}Response struct {
	*embedMime
	{{range .Results}}{{template "param" .}}
	{{end}}
}

// decode{{.MethodName}}Request creates a decoder for {{.BasePackage}}.{{.InterfaceName}}.{{.MethodName}}
func decode{{.MethodName}}Request(ctx context.Context, r *http.Request) (interface{}, error) {
	req := new({{.MethodNameLcase}}Request)
	req.embedMime = new(embedMime)
	return encoding.Default().DecodeRequest(req)(ctx, r)
}

// decode{{.MethodName}}Response creates a decoder for {{.BasePackage}}.{{.InterfaceName}}.{{.MethodName}}
func decode{{.MethodName}}Response(ctx context.Context, r *http.Response) (interface{}, error) {
	req := new({{.MethodNameLcase}}Response)
	req.embedMime = new(embedMime)
	return encoding.Default().DecodeResponse(req)(ctx, r)
}

// encode{{.MethodName}}Request creates an encoder for {{.BasePackage}}.{{.InterfaceName}}.{{.MethodName}}
func encode{{.MethodName}}Request (ctx context.Context, r *http.Request, request interface{}) error {
	return encoding.Default().EncodeRequest()(ctx, r, request)
}

// encode{{.MethodName}}Response creates an encoder for {{.BasePackage}}.{{.InterfaceName}}.{{.MethodName}}
func encode{{.MethodName}}Response (ctx context.Context, w http.ResponseWriter, response interface{}) error {
	return encoding.Default().EncodeResponse()(ctx, w, response)
}

{{end}}
{{define "param"}}	{{if .IsContext}}{{else}}{{.PublicName}} {{.Type}} `json:"{{.Name}}" xml:"{{.Name}}"`{{end}}{{end}}
{{range .Methods}}{{template "request-response" .}}{{end}}
