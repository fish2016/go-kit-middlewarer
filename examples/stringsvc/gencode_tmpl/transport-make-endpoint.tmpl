// Autogenerated code, do not change directly.
// To make changes to this file, please modify the templates at
// go-kit-middlewarer/tmpl/*.tmpl

package http

import(
	"context"

	"github.com/go-kit/kit/endpoint"

	{{.BasePackageImport}}
)

{{define "make-endpoint"}}
// make{{.MethodName}}Endpoint creates a github.com/go-kit/kit/endpoint.Endpoint for {{.BasePackage}}.{{.InterfaceName}}.{{.MethodName}}.
// It will automatically wrap and unwrap the arguments and results of the method.
func make{{.MethodName}}Endpoint({{.InterfaceNameLcase}} {{.BasePackageName}}.{{.InterfaceName}}) endpoint.Endpoint {
	return func({{.ContextParamName}} context.Context, request interface{}) (resp interface{}, {{.ErrorResultName}} error) {
		req := request.(*{{.MethodNameLcase}}Request)
		var _resp {{.MethodNameLcase}}Response
		_resp.embedMime = new(embedMime)

		{{if .Params}}
		{{range .Params}}{{if .IsContext}}{{else}}{{.Name}} := req.{{.PublicName}}{{end}}
		{{end}}{{end}}

		{{if .Results}}
		{{if .HasMoreThanOneResult}}
		{{.MethodResultNamesStr}} := {{.InterfaceNameLcase}}.{{.MethodName}}({{.MethodArgumentNamesStr}})
		{{else if .HasErrorResult}}
		{{.MethodResultNamesStr}} = {{.InterfaceNameLcase}}.{{.MethodName}}({{.MethodArgumentNamesStr}})
		{{else}}
		{{.MethodResultNamesStr}} := {{.InterfaceNameLcase}}.{{.MethodName}}({{.MethodArgumentNamesStr}})
		{{end}}
		{{range .Results}}_resp.{{.PublicName}} = {{.Name}}
		{{end}}
		{{else}}
		{{.InterfaceNameLcase}}.{{.MethodName}}({{.MethodArgumentNamesStr}})
		{{end}}

		if mime := req.GetMime(); mime != "" {
			_resp.SetMime( mime )
		}
		resp = _resp

		return
	}
}
{{end}}
{{range .Methods}}{{template "make-endpoint" .}}{{end}}
